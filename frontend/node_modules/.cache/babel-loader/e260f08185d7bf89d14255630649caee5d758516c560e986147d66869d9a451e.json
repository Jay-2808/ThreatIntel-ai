{"ast":null,"code":"var _jsxFileName = \"E:\\\\Jay-Files\\\\Code\\\\Projects\\\\ThreatIntel-AI\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // For demo purposes, using mock login\n      // In production, use: const response = await authService.login({ email, password });\n      if (email === \"admin@threatintel.ai\" && password === \"admin123\") {\n        setUser({\n          id: '1',\n          name: 'Admin User',\n          email: email,\n          role: 'admin'\n        });\n      } else {\n        throw new Error(\"Invalid credentials\");\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to login');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setIsLoading(true);\n      // For demo purposes, just clearing the user\n      // In production, use: await authService.logout();\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const clearError = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      isAuthenticated: !!user,\n      isLoading,\n      error,\n      clearError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Igm1dc4M8upOH2BD/7KW4CEHhO8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","error","setError","login","email","password","id","name","role","Error","err","message","logout","clearError","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["E:/Jay-Files/Code/Projects/ThreatIntel-AI/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\r\nimport { authService } from '../services/api';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  clearError: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      // For demo purposes, using mock login\r\n      // In production, use: const response = await authService.login({ email, password });\r\n      if (email === \"admin@threatintel.ai\" && password === \"admin123\") {\r\n        setUser({\r\n          id: '1',\r\n          name: 'Admin User',\r\n          email: email,\r\n          role: 'admin'\r\n        });\r\n      } else {\r\n        throw new Error(\"Invalid credentials\");\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to login');\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      // For demo purposes, just clearing the user\r\n      // In production, use: await authService.logout();\r\n      setUser(null);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        login,\r\n        logout,\r\n        isAuthenticated: !!user,\r\n        isLoading,\r\n        error,\r\n        clearError,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoB5D,MAAMC,WAAW,gBAAGL,aAAa,CAA8BM,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMc,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACvD,IAAI;MACFL,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA;MACA,IAAIE,KAAK,KAAK,sBAAsB,IAAIC,QAAQ,KAAK,UAAU,EAAE;QAC/DP,OAAO,CAAC;UACNQ,EAAE,EAAE,GAAG;UACPC,IAAI,EAAE,YAAY;UAClBH,KAAK,EAAEA,KAAK;UACZI,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZR,QAAQ,CAACQ,GAAG,YAAYD,KAAK,GAAGC,GAAG,CAACC,OAAO,GAAG,iBAAiB,CAAC;MAChE,MAAMD,GAAG;IACX,CAAC,SAAS;MACRV,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMY,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACFZ,YAAY,CAAC,IAAI,CAAC;MAClB;MACA;MACAF,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,SAAS;MACRE,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvBX,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAACsB,QAAQ;IACnBC,KAAK,EAAE;MACLlB,IAAI;MACJM,KAAK;MACLS,MAAM;MACNI,eAAe,EAAE,CAAC,CAACnB,IAAI;MACvBE,SAAS;MACTE,KAAK;MACLY;IACF,CAAE;IAAAlB,QAAA,EAEDA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxB,EAAA,CA5DWF,YAAqD;AAAA2B,EAAA,GAArD3B,YAAqD;AA8DlE,OAAO,MAAM4B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGpC,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACgC,OAAO,EAAE;IACZ,MAAM,IAAIf,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOe,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}