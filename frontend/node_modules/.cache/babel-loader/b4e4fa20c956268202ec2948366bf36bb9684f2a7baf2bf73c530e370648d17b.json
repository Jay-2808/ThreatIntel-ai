{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Auth interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API endpoints\nexport const securityService = {\n  getDashboardMetrics: () => api.get('/api/metrics/dashboard'),\n  getSecurityScore: () => api.get('/api/metrics/security-score'),\n  getRecentAlerts: () => api.get('/api/alerts/recent'),\n  getThreatMap: () => api.get('/api/threats/map')\n};\nexport const phishingService = {\n  getCampaigns: () => api.get('/api/phishing/campaigns'),\n  createCampaign: data => api.post('/api/phishing/campaigns', data),\n  getCampaignResults: id => api.get(`/api/phishing/campaigns/${id}/results`)\n};\nexport const trainingService = {\n  getModules: () => api.get('/api/training/modules'),\n  getEmployeeProgress: () => api.get('/api/training/progress'),\n  getCertifications: () => api.get('/api/training/certifications'),\n  completeModule: moduleId => api.post(`/api/training/modules/${moduleId}/complete`)\n};\nexport const authService = {\n  login: credentials => api.post('/api/auth/login', credentials),\n  register: userData => api.post('/api/auth/register', userData),\n  logout: () => api.post('/api/auth/logout'),\n  getCurrentUser: () => api.get('/api/auth/me')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","securityService","getDashboardMetrics","get","getSecurityScore","getRecentAlerts","getThreatMap","phishingService","getCampaigns","createCampaign","data","post","getCampaignResults","id","trainingService","getModules","getEmployeeProgress","getCertifications","completeModule","moduleId","authService","login","credentials","register","userData","logout","getCurrentUser"],"sources":["E:/Jay-Files/Code/Projects/ThreatIntel-AI/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Auth interceptor\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('authToken');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// API endpoints\r\nexport const securityService = {\r\n  getDashboardMetrics: () => api.get('/api/metrics/dashboard'),\r\n  getSecurityScore: () => api.get('/api/metrics/security-score'),\r\n  getRecentAlerts: () => api.get('/api/alerts/recent'),\r\n  getThreatMap: () => api.get('/api/threats/map'),\r\n};\r\n\r\nexport const phishingService = {\r\n  getCampaigns: () => api.get('/api/phishing/campaigns'),\r\n  createCampaign: (data: any) => api.post('/api/phishing/campaigns', data),\r\n  getCampaignResults: (id: string) => api.get(`/api/phishing/campaigns/${id}/results`),\r\n};\r\n\r\nexport const trainingService = {\r\n  getModules: () => api.get('/api/training/modules'),\r\n  getEmployeeProgress: () => api.get('/api/training/progress'),\r\n  getCertifications: () => api.get('/api/training/certifications'),\r\n  completeModule: (moduleId: string) => api.post(`/api/training/modules/${moduleId}/complete`),\r\n};\r\n\r\nexport const authService = {\r\n  login: (credentials: { email: string; password: string }) => \r\n    api.post('/api/auth/login', credentials),\r\n  register: (userData: any) => api.post('/api/auth/register', userData),\r\n  logout: () => api.post('/api/auth/logout'),\r\n  getCurrentUser: () => api.get('/api/auth/me'),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,eAAe,GAAG;EAC7BC,mBAAmB,EAAEA,CAAA,KAAMb,GAAG,CAACc,GAAG,CAAC,wBAAwB,CAAC;EAC5DC,gBAAgB,EAAEA,CAAA,KAAMf,GAAG,CAACc,GAAG,CAAC,6BAA6B,CAAC;EAC9DE,eAAe,EAAEA,CAAA,KAAMhB,GAAG,CAACc,GAAG,CAAC,oBAAoB,CAAC;EACpDG,YAAY,EAAEA,CAAA,KAAMjB,GAAG,CAACc,GAAG,CAAC,kBAAkB;AAChD,CAAC;AAED,OAAO,MAAMI,eAAe,GAAG;EAC7BC,YAAY,EAAEA,CAAA,KAAMnB,GAAG,CAACc,GAAG,CAAC,yBAAyB,CAAC;EACtDM,cAAc,EAAGC,IAAS,IAAKrB,GAAG,CAACsB,IAAI,CAAC,yBAAyB,EAAED,IAAI,CAAC;EACxEE,kBAAkB,EAAGC,EAAU,IAAKxB,GAAG,CAACc,GAAG,CAAC,2BAA2BU,EAAE,UAAU;AACrF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG;EAC7BC,UAAU,EAAEA,CAAA,KAAM1B,GAAG,CAACc,GAAG,CAAC,uBAAuB,CAAC;EAClDa,mBAAmB,EAAEA,CAAA,KAAM3B,GAAG,CAACc,GAAG,CAAC,wBAAwB,CAAC;EAC5Dc,iBAAiB,EAAEA,CAAA,KAAM5B,GAAG,CAACc,GAAG,CAAC,8BAA8B,CAAC;EAChEe,cAAc,EAAGC,QAAgB,IAAK9B,GAAG,CAACsB,IAAI,CAAC,yBAAyBQ,QAAQ,WAAW;AAC7F,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACzBC,KAAK,EAAGC,WAAgD,IACtDjC,GAAG,CAACsB,IAAI,CAAC,iBAAiB,EAAEW,WAAW,CAAC;EAC1CC,QAAQ,EAAGC,QAAa,IAAKnC,GAAG,CAACsB,IAAI,CAAC,oBAAoB,EAAEa,QAAQ,CAAC;EACrEC,MAAM,EAAEA,CAAA,KAAMpC,GAAG,CAACsB,IAAI,CAAC,kBAAkB,CAAC;EAC1Ce,cAAc,EAAEA,CAAA,KAAMrC,GAAG,CAACc,GAAG,CAAC,cAAc;AAC9C,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}